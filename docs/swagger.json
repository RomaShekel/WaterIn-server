{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "WaterIn server",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "App for management client contacts"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Operations about users."
    },
    {
      "name": "Water",
      "description": "Operations about water."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User rigistration",
        "operationId": "registerUser",
        "description": "User rigistration",
        "security": [
          {}
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User email",
                    "type": "string",
                    "example": "example@mail.com"
                  },
                  "password": {
                    "description": "Account password",
                    "type": "string",
                    "example": "password321"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registers a user",
            "headers": {
              "Set-Cookie": {
                "description": "Contains session id and refresh tokens.",
                "schema": {
                  "type": "string",
                  "example": "sessionId=abc123; Path=/; HttpOnly; Secure; SameSite=None"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "description": "Error while registering user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "ConflictError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Email in use"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "loginUser",
        "description": "User login",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User email",
                    "type": "string",
                    "example": "example@mail.com"
                  },
                  "password": {
                    "description": "Account password",
                    "type": "string",
                    "example": "password321"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registers a user",
            "headers": {
              "Set-Cookie": {
                "description": "Contains session id and refresh tokens.",
                "schema": {
                  "type": "string",
                  "example": "sessionId=abc123; Path=/; HttpOnly; Secure; SameSite=None"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/session"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "operationId": "logoutUser",
        "description": "Logs out the user by invalidating the session",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session ID of the user."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "name": {
                "description": "User name",
                "type": "string",
                "example": "John Doe"
              },
              "email": {
                "description": "User email",
                "type": "string",
                "example": "example@mail.com"
              },
              "photo": {
                "description": "Link to user's photo",
                "type": "string",
                "example": "https://res.cloudinary.com/uqwgdu/image/upload/image.png"
              },
              "sportHours": {
                "description": "User's sport hours",
                "type": "number",
                "example": 2
              },
              "weight": {
                "description": "User's weight",
                "type": "number",
                "example": 82
              },
              "waterRate": {
                "description": "Amount of water",
                "type": "number",
                "example": 1500
              },
              "gender": {
                "description": "User's gender",
                "type": "string",
                "enum": [
                  "woman",
                  "man"
                ]
              }
            }
          },
          "accessToken": {
            "type": "string",
            "example": "N+DdlzeRwSh8hWOToTI9iHtzFyi201r3BIA93li6"
          }
        },
        "required": [
          "email"
        ]
      },
      "session": {
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "userId": {
                "description": "User id",
                "type": "string",
                "example": "66ae5e4b60080f8db63bb8ed"
              }
            }
          },
          "accessToken": {
            "type": "string",
            "example": "N+DdlzeRwSh8hWOToTI9iHtzFyi201r3BIA93li6"
          }
        },
        "required": [
          "email"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing required field"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Something went wrong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
